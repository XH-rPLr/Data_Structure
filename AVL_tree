public class AVLTreeRecursive <T extends Comparable<T>> implements Iterable<T> {
    public class Node implements PrintableNode {

        //bf short for balance factor
        public int bf;

        public T value;

        public int height;

        public Node left, right;

        public Node(T value) {
            this.value = value;
        }

        @Override
        public PrintableNode getLeft() {
            return left;
        }

        @Override
        public PrintableNode getRight() {
            return right;
        }

        @Override
        public String getText() {
            return value.toString();
        }
    } 

     // The root node of the AVL tree.
    public Node root;

    // Tracks the number of nodes inside the tree.
    private int nodeCount = 0;

    // The height of a rooted tree is the number of edges between the tree's
    // root and its furthest leaf. This means that a tree containing a single
    // node has a height of 0.
    public int height() {
        if (root == null) return 0;
        return root.height;
    }

    // Returns the number of nodes in the tree.
    public int size() {
        return nodeCount;
    }
}